#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var grunt = require('grunt');
var commander = require('commander');
var color = require('colorful').color;
var spmrc = require('spmrc');

/*
  init directory
*/

var homeDir = process.env.HOME || process.env.USERPROFILE;
var defaultDir = path.join(homeDir, '.spm', 'init');
var initDir = (spmrc.get('init.template') || defaultDir).replace(/^~/, homeDir);

/*
  available templates
*/

mkdirp(initDir);

var templates = availableTemplates(initDir);

/*
  commander init
*/

commander
  .usage('[template]')
  .option('-d, --debug', 'Enable debugging mode for tasks that support it.')
  .option('-v, --verbose', 'Show more infomation.')
  .option('--stack', 'Show stack message.');

commander.on('--help', function() {
  console.log();
  console.log(color.cyan('  Available templates:'));
  console.log();
  if (!isEmptyObject(templates)) {
    writeTable(templates);
  } else {
    console.log('    No templates found');
  }
  console.log();
  console.log('  Change init directory in ~/.spm/spmrc');
  console.log();
  console.log(color.magenta('    [init]'));
  console.log('    template = ~/.spm/init');
  console.log();
});
commander.parse(process.argv);

/*
  show help
*/

var cmd = commander.args[0];
if (!cmd || !templates[cmd]) {
  // argu not exist
  if (cmd) {
    console.log();
    console.log(color.red('  Template "' + cmd + '" not exist.'));
  }
  // no argu
  process.stdout.write(commander.helpInformation());
  commander.emit('--help');
  process.exit();
}

/*
  run grunt init task
*/
var gruntOption = {};
if (commander.stack) gruntOption.stack = true;

grunt.task.loadTasks(path.join(__dirname, '../node_modules/grunt-init/tasks'));
grunt.cli.tasks = ['init:' + templates[cmd].directory];
grunt.cli(gruntOption);

/*
  helper mkdirp
*/

function mkdirp(directory) {
  if (fs.existsSync(directory)) return;

  var arr = directory.split(path.sep);
  for (var i = 2, l = arr.length; i <= l; i++) {
    var p = arr.slice(0, i).join(path.sep);
    if (fs.existsSync(p)) continue;
    fs.mkdirSync(p);
  }
}

/*
  helper test is empty object
*/

function isEmptyObject(obj) {
  for (var name in obj) {
    return false;
  }
  return true;
}

/*
  helper print 2 column
*/

function writeTable(templates) {
  for (var template in templates) {
    var row = ['    '];
    row.push(template);
    for (var i = 0, l = 15 - template.length; i < l; i++ ) {
      row.push(' ');
    }
    row.push(templates[template].description);
    console.log(row.join(''));
  }
}

/*
  helper get available templates
  should have template.js and exports.template
*/

function availableTemplates(initDir) {
  var templates = {}, t = fs.readdirSync(initDir);
  for (var i in t) {
    var template = t[i];
    var p = path.join(initDir, template);
    var templateJs = path.join(p, 'template.js');
    if (fs.existsSync(templateJs)) {
      var o = require(templateJs);
      if (o.template) {
        var desc = o.description || '';
        templates[template] = {
          description: desc,
          directory: p
        };
      }
    }
  }
  return templates;
}
