#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var grunt = require('grunt');
var commander = require('commander');
var color = require('colorful').color;
var spmrc = require('spmrc');
var init = require('../lib/init');

/*
  init directory
*/

var initDir = (spmrc.get('init.template') || '~/.spm/init').replace(/^~/, process.env.HOME);

/*
  available templates
*/

var templates = {};

// default template
var defaultDir = path.join(__dirname, '../templates');
var d = fs.readdirSync(defaultDir);
for (var j in d) {
  templates[d[j]] = path.join(defaultDir, d[j]);
}

// template in ~/.spm/init
if (!fs.existsSync(initDir)) {
  fs.mkdirSync(initDir);
}
var t = fs.readdirSync(initDir);
for (var i in t) {
  templates[t[i]] = path.join(initDir, t[i]);
}

/*
  commander init
*/

commander
  .usage('[template]')
  .option('-d, --debug', 'Enable debugging mode for tasks that support it.')
  .option('--stack', 'Print a stack trace when exiting with a warning or fatal error.')
  .option('-v, --verbose', 'Show more infomation.');

commander.on('--help', function() {
  console.log();
  console.log('  Available templates:');
  console.log();
  for (var template in templates) {
    console.log('    ' + template);
  }
  console.log();
  console.log('  Change init directory in ~/.spm/spmrc');
  console.log();
  console.log('  [init]');
  console.log('  template = ~/.spm/init');
});
commander.parse(process.argv);

/*
  show help
*/

var cmd = commander.args[0];
if (!cmd || !templates[cmd]) {
  // argu not exist
  if (cmd) {
    console.log();
    console.log(color.red('  Template "' + cmd + '" not exist.'));
  }
  // no argu
  process.stdout.write(commander.helpInformation());
  commander.emit('--help');
  process.exit();
}

/*
  run grunt init task
*/
var gruntOption = {};
if (commander.stack) gruntOption.stack = true;

grunt.task.loadTasks(path.join(__dirname, '../node_modules/grunt-init/tasks'));
grunt.cli.tasks = ['init:' + templates[cmd]];
grunt.cli(gruntOption);
